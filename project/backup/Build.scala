import sbt._
import sbt.Keys._
import play.Project._


object BuildSettings {

  val buildScalaVersion = "2.10.3"

  val buildSettings = play.Project.playScalaSettings ++ Seq(
    scalaVersion := buildScalaVersion,
    // resolvers += Resolver.sonatypeRepo("snapshots"),
    resolvers += Resolver.sonatypeRepo("releases"),
    scalacOptions ++= Seq("-feature")
  )
}


trait MoreTasks extends sbt.Build {

  // see: https://github.com/justone/sbt-scalatra-example/blob/master/project/Build.scala
  val zap = TaskKey[Unit]("zap", "Removes all autogenerated files.")

  def zapTask = (streams, baseDirectory) map {
    (out, basedir) => {
      IO.delete(basedir / "project" / "boot")
      IO.delete(basedir / "project" / "target")
      IO.delete(basedir / "target")
      IO.delete(basedir / "logs")
    }
  }

}


object Build extends sbt.Build with MoreTasks {

  val appName = "ssdemojpa"
  val appVersion = "0.1-SNAPSHOT"


  //-- dependencies

  val mockitoVersion = "1.9.5"
  val json4sVersion = "3.2.7"
  val securesocialVersion = "2.1.3"
  val postgresqlVersion = "9.1-901-1.jdbc4"
  val twitter4jVersion = "4.0.1"

  val essencialDeps = Seq(
    "org.mockito" % "mockito-all" % mockitoVersion % "test"
  )


  val modelsDeps = essencialDeps ++ Seq(
    javaEbean
    //"postgresql" % "postgresql" % postgresqlVersion
  )

  val servicesDeps = essencialDeps ++ Seq(
    "ws.securesocial" %% "securesocial" % securesocialVersion,
    "org.twitter4j" % "twitter4j-core" % twitter4jVersion
  )

  val rootDeps = essencialDeps ++ Seq(
    "javax.inject" % "javax.inject" % "1",
    "com.google.inject" % "guice" % "3.0",
    "org.json4s" %% "json4s-jackson" % json4sVersion,
    "ws.securesocial" %% "securesocial" % securesocialVersion
    // To use the testkit for now compile and publish it locally
    // then uncomment this dependency.
    //"ws.securesocial" %% "securesocial-testkit" % "master-SNAPSHOT" % "test"
  )



  lazy val models = play.Project(
    appName + "-models", appVersion,
    modelsDeps,
    path = file("modules/models"),
    settings = BuildSettings.buildSettings
  ).settings(
      zap <<= zapTask,
      zap <<= zap.dependsOn(clean in Compile)
    )

  lazy val services = play.Project(
    appName + "-services", appVersion,
    servicesDeps,
    path = file("modules/services"),
    settings = BuildSettings.buildSettings
  ).settings(
      zap <<= zapTask,
      zap <<= zap.dependsOn(clean in Compile)
    )
    .dependsOn(models)

  lazy val root = play.Project(
    appName, appVersion,
    rootDeps,
    settings = BuildSettings.buildSettings
  ).settings(
      zap <<= zapTask,
      zap <<= zap.dependsOn(clean in Compile)
    )
    .aggregate(models,services)
    .dependsOn(models,services)

}
